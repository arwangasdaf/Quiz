
/*
二货小易有一个W*H的网格盒子，网格的行编号为0~H-1，网格的列编号为0~W-1。每个格子至多可以放一块蛋糕，任意两块蛋糕的欧几里得距离不能等于2。
对于两个格子坐标(x1,y1),(x2,y2)的欧几里得距离为:
( (x1-x2) * (x1-x2) + (y1-y2) * (y1-y2) ) 的算术平方根
小易想知道最多可以放多少块蛋糕在网格盒子里。 
输入描述:
每组数组包含网格长宽W,H，用空格分割.(1 ≤ W、H ≤ 1000)


输出描述:
输出一个最多可以放的蛋糕数

输入例子:
3 2

输出例子:
4
'''
*/

import java.util.*;
class Solution{
      public static void main(String[] args){
             int W,H;
             //最后的蛋糕数
             int result = 0;
             Scanner in = new Scanner(System.in);
             W = in.nextInt();
             H = in.nextInt();
             boolean[][] cakes = new boolean[M][H];
             //将全部格子赋值为true
             for(int i=0;i<M;i++)
                 for(int j=0;j<H;j++){
                 cakes[i][j] = true;     
             } 
             // 进行规则的判断
             for(int i=0;i<M;i++)
                 for(int j=0;j<H;j++){
                 if(cakes[i][j]){
                    ++result;
                    for(int col=j+2;col<H;col+=2)
                        cakes[i][col] = false;
                    for(int row=i+2;row<M;row+=2)
                        cakes[row][j] = false;
                 }
             }
             return result;
      }
}
